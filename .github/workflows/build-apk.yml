name: Build Android APK

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code
      - uses: actions/checkout@v4

      # 2. Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # 3. Setup Java JDK
      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Export JAVA_HOME
        run: echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV

      # 4. Setup Android SDK (stable version)
      - name: Setup Android SDK
        id: android_sdk_setup
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: "9477386"
          accept-android-sdk-licenses: true
          packages: |
            platform-tools
            platforms;android-32
            build-tools;32.0.0

      # 5. Cache Gradle
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 6. Install NPM dependencies
      - name: Install dependencies
        run: npm ci

      # 7. Build web app
      - name: Build web app
        run: npm run build

      # 8. Verify dist folder
      - name: Verify dist folder
        run: |
          if [ ! -d dist ]; then
            echo "❌ dist/ folder missing! Check build output."
            exit 1
          fi
          ls -la dist/

      # 9. Add Android platform (only if missing)
      - name: Add Android platform
        run: |
          if [ ! -d "android" ]; then
            npx cap add android
          fi

      # 10. Sync Capacitor
      - name: Sync Capacitor
        run: npx cap sync android

      # 11. Configure Gradle JVM & properties safely
      - name: Setup Gradle JVM
        run: |
          mkdir -p android
          touch android/gradle.properties
          grep -q "org.gradle.java.home" android/gradle.properties || echo "org.gradle.java.home=$JAVA_HOME" >> android/gradle.properties
          grep -q "org.gradle.jvmargs" android/gradle.properties || echo "org.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=512m" >> android/gradle.properties

      # 12. Fix Android build.gradle safely
      - name: Fix Android Gradle config
        run: |
          FILE="android/app/build.gradle"
          grep -q "sourceCompatibility JavaVersion.VERSION_17" $FILE || sed -i "/android {/a \    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_17\n        targetCompatibility JavaVersion.VERSION_17\n    }\n    kotlinOptions {\n        jvmTarget = \"17\"\n    }" $FILE

      # 13. Make Gradlew executable
      - name: Make Gradlew executable
        run: chmod 755 android/gradlew

      # 14. Build APK
      - name: Build APK
        run: |
          cd android
          ./gradlew assembleDebug --stacktrace --info

      # 15. Verify APK exists
      - name: Verify APK exists
        run: |
          APK_PATH="android/app/build/outputs/apk/debug/app-debug.apk"
          if [ ! -f "$APK_PATH" ]; then
            echo "❌ APK not found at $APK_PATH"
            exit 1
          fi
          ls -la $APK_PATH

      # 16. Upload APK artifact
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: getlink-debug-apk-${{ github.run_number }}
          path: android/app/build/outputs/apk/debug/app-debug.apk
          retention-days: 30

      # 17. Create GitHub Release (main branch only)
      - name: Create Release
        if: github.ref == 'refs/heads/main'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: GetLink v${{ github.run_number }}
          body: |
            🚀 Automated release of GetLink APK
            🔎 Commit: ${{ github.sha }}
            🕑 Built at: ${{ github.run_started_at }}
            📱 Download the APK from assets below.
          draft: false
          prerelease: false

      # 18. Upload Release Asset
      - name: Upload Release Asset
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: android/app/build/outputs/apk/debug/app-debug.apk
          asset_name: GetLink-v${{ github.run_number }}.apk
          asset_content_type: application/vnd.android.package-archive
